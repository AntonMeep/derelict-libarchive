module derelict.libarchive.func;

import derelict.libarchive.type;
import derelict.util.loader;
import derelict.util.system;
import core.stdc.stddef : wchar_t;
import core.stdc.stdio : FILE;
version(Windows) import core.sys.windows.winbase : BY_HANDLE_FILE_INFORMATION;

extern(C) @system @nogc nothrow {
	// archive.h
	alias da_archive_version_number = int function();
	alias da_archive_version_string = const(char)* function();
	alias da_archive_version_details = const(char)* function();
	alias da_archive_zlib_version = const(char)* function();
	alias da_archive_liblzma_version = const(char)* function();
	alias da_archive_bzlib_version = const(char)* function();
	alias da_archive_liblz4_version = const(char)* function();
	alias da_archive_read_new = archive* function();
	alias da_archive_read_support_filter_all = int function(archive*);
	alias da_archive_read_support_filter_bzip2 = int function(archive*);
	alias da_archive_read_support_filter_compress = int function(archive*);
	alias da_archive_read_support_filter_gzip = int function(archive*);
	alias da_archive_read_support_filter_grzip = int function(archive*);
	alias da_archive_read_support_filter_lrzip = int function(archive*);
	alias da_archive_read_support_filter_lz4 = int function(archive*);
	alias da_archive_read_support_filter_lzip = int function(archive*);
	alias da_archive_read_support_filter_lzma = int function(archive*);
	alias da_archive_read_support_filter_lzop = int function(archive*);
	alias da_archive_read_support_filter_none = int function(archive*);
	alias da_archive_read_support_filter_program = int function(archive*,const(char)*);
	alias da_archive_read_support_filter_program_signature = int function(archive*,const(char)*,const(void)*,size_t);
	alias da_archive_read_support_filter_rpm = int function(archive*);
	alias da_archive_read_support_filter_uu = int function(archive*);
	alias da_archive_read_support_filter_xz = int function(archive*);
	alias da_archive_read_support_format_7zip = int function(archive*);
	alias da_archive_read_support_format_all = int function(archive*);
	alias da_archive_read_support_format_ar = int function(archive*);
	alias da_archive_read_support_format_by_code = int function(archive*,int);
	alias da_archive_read_support_format_cab = int function(archive*);
	alias da_archive_read_support_format_cpio = int function(archive*);
	alias da_archive_read_support_format_empty = int function(archive*);
	alias da_archive_read_support_format_gnutar = int function(archive*);
	alias da_archive_read_support_format_iso9660 = int function(archive*);
	alias da_archive_read_support_format_lha = int function(archive*);
	alias da_archive_read_support_format_mtree = int function(archive*);
	alias da_archive_read_support_format_rar = int function(archive*);
	alias da_archive_read_support_format_raw = int function(archive*);
	alias da_archive_read_support_format_tar = int function(archive*);
	alias da_archive_read_support_format_warc = int function(archive*);
	alias da_archive_read_support_format_xar = int function(archive*);
	alias da_archive_read_support_format_zip = int function(archive*);
	alias da_archive_read_support_format_zip_streamable = int function(archive*);
	alias da_archive_read_support_format_zip_seekable = int function(archive*);
	alias da_archive_read_set_format = int function(archive*, int);
	alias da_archive_read_append_filter = int function(archive*, int);
	alias da_archive_read_append_filter_program = int function(archive*,const(char)*);
	alias da_archive_read_append_filter_program_signature = int function(archive*,const(char)*,const(void)*,size_t);
	alias da_archive_read_set_open_callback = int function(archive*,archive_open_callback*);
	alias da_archive_read_set_read_callback = int function(archive*,archive_read_callback*);
	alias da_archive_read_set_seek_callback = int function(archive*,archive_seek_callback*);
	alias da_archive_read_set_skip_callback = int function(archive*,archive_skip_callback*);
	alias da_archive_read_set_close_callback = int function(archive*,archive_close_callback*);
	alias da_archive_read_set_switch_callback = int function(archive*,archive_switch_callback*);
	alias da_archive_read_set_callback_data = int function(archive*,void*);
	alias da_archive_read_set_callback_data2 = int function(archive*, void*,uint);
	alias da_archive_read_add_callback_data = int function(archive*,void*,uint);
	alias da_archive_read_append_callback_data = int function(archive*,void*);
	alias da_archive_read_prepend_callback_data = int function(archive*,void*);
	alias da_archive_read_open1 = int function(archive*);
	alias da_archive_read_open = int function(archive*,void*,archive_open_callback*,archive_read_callback*,archive_close_callback*);
	alias da_archive_read_open2 = int function(archive*,void*,archive_open_callback*,archive_read_callback*,archive_skip_callback*,archive_close_callback*);
	alias da_archive_read_open_filename = int function(archive*,const(char)*,size_t);
	alias da_archive_read_open_filenames = int function(archive*,const(char)**,size_t);
	alias da_archive_read_open_filename_w = int function(archive*,const(wchar_t)*,size_t);
	alias da_archive_read_open_memory = int function(archive*,const(void)*,size_t);
	alias da_archive_read_open_memory2 = int function(archive*,const(void)*,size_t,size_t);
	alias da_archive_read_open_fd = int function(archive*,int,size_t);
	alias da_archive_read_open_FILE = int function(archive*,FILE*);
	alias da_archive_read_next_header = int function(archive*,archive_entry**);
	alias da_archive_read_next_header2 = int function(archive*,archive_entry*);
	alias da_archive_read_header_position = la_int64_t function(archive*);
	alias da_archive_read_has_encrypted_entries = int function(archive*);
	alias da_archive_read_format_capabilities = int function(archive*);
	alias da_archive_read_data = la_ssize_t function(archive*,void*,size_t);
	alias da_archive_seek_data = la_int64_t function(archive*,la_int64_t,int);
	alias da_archive_read_data_block = int function(archive*,const(void)**,size_t*,la_int64_t*);
	alias da_archive_read_data_skip = int function(archive*);
	alias da_archive_read_data_into_fd = int function(archive*,int);
	alias da_archive_read_set_format_option = int function(archive*,const(char)*,const(char)*,const(char)*);
	alias da_archive_read_set_filter_option = int function(archive*,const(char)*,const(char)*,const(char)*);
	alias da_archive_read_set_option = int function(archive*,const(char)*,const(char)*,const(char)*);
	alias da_archive_read_set_options = int function(archive*,const(char)*);
	alias da_archive_read_add_passphrase = int function(archive*,const(char)*);
	alias da_archive_read_set_passphrase_callback = int function(archive*,void*,archive_passphrase_callback*);
	alias da_archive_read_extract = int function(archive*,archive_entry*,int);
	alias da_archive_read_extract2 = int function(archive*,archive_entry*,archive*);
	alias da_archive_read_extract_set_progress_callback = void function(archive*, void function(void*),void*);
	alias da_archive_read_extract_set_skip_file = void function(archive*,la_int64_t,la_int64_t);
	alias da_archive_read_close = int function(archive*);
	alias da_archive_read_free = int function(archive*);
	alias da_archive_write_new = archive* function();
	alias da_archive_write_set_bytes_per_block = int function(archive*,int);
	alias da_archive_write_get_bytes_per_block = int function(archive*);
	alias da_archive_write_set_bytes_in_last_block = int function(archive*,int);
	alias da_archive_write_get_bytes_in_last_block = int function(archive*);
	alias da_archive_write_set_skip_file = int function(archive*,la_int64_t,la_int64_t);
	alias da_archive_write_add_filter = int function(archive*,int);
	alias da_archive_write_add_filter_by_name = int function(archive*,const(char)*);
	alias da_archive_write_add_filter_b64encode = int function(archive*);
	alias da_archive_write_add_filter_bzip2 = int function(archive*);
	alias da_archive_write_add_filter_compress = int function(archive*);
	alias da_archive_write_add_filter_grzip = int function(archive*);
	alias da_archive_write_add_filter_gzip = int function(archive*);
	alias da_archive_write_add_filter_lrzip = int function(archive*);
	alias da_archive_write_add_filter_lz4 = int function(archive*);
	alias da_archive_write_add_filter_lzip = int function(archive*);
	alias da_archive_write_add_filter_lzma = int function(archive*);
	alias da_archive_write_add_filter_lzop = int function(archive*);
	alias da_archive_write_add_filter_none = int function(archive*);
	alias da_archive_write_add_filter_program = int function(archive*,const(char)*);
	alias da_archive_write_add_filter_uuencode = int function(archive*);
	alias da_archive_write_add_filter_xz = int function(archive*);
	alias da_archive_write_set_format = int function(archive*,int);
	alias da_archive_write_set_format_by_name = int function(archive*,const(char)*);
	alias da_archive_write_set_format_7zip = int function(archive*);
	alias da_archive_write_set_format_ar_bsd = int function(archive*);
	alias da_archive_write_set_format_ar_svr4 = int function(archive*);
	alias da_archive_write_set_format_cpio = int function(archive*);
	alias da_archive_write_set_format_cpio_newc = int function(archive*);
	alias da_archive_write_set_format_gnutar = int function(archive*);
	alias da_archive_write_set_format_iso9660 = int function(archive*);
	alias da_archive_write_set_format_mtree = int function(archive*);
	alias da_archive_write_set_format_mtree_classic = int function(archive*);
	alias da_archive_write_set_format_pax = int function(archive*);
	alias da_archive_write_set_format_pax_restricted = int function(archive*);
	alias da_archive_write_set_format_raw = int function(archive*);
	alias da_archive_write_set_format_shar = int function(archive*);
	alias da_archive_write_set_format_shar_dump = int function(archive*);
	alias da_archive_write_set_format_ustar = int function(archive*);
	alias da_archive_write_set_format_v7tar = int function(archive*);
	alias da_archive_write_set_format_warc = int function(archive*);
	alias da_archive_write_set_format_xar = int function(archive*);
	alias da_archive_write_set_format_zip = int function(archive*);
	alias da_archive_write_set_format_filter_by_ext = int function(archive*,const(char)*);
	alias da_archive_write_set_format_filter_by_ext_def = int function(archive*,const(char)*,const(char)*);
	alias da_archive_write_zip_set_compression_deflate = int function(archive*);
	alias da_archive_write_zip_set_compression_store = int function(archive*);
	alias da_archive_write_open = int function(archive*,void*,archive_open_callback*,archive_write_callback*,archive_close_callback*);
	alias da_archive_write_open_fd = int function(archive*,int);
	alias da_archive_write_open_filename = int function(archive*,const(char)*);
	alias da_archive_write_open_filename_w = int function(archive*,const(wchar_t)*);
	alias da_archive_write_open_FILE = int function(archive*,FILE*);
	alias da_archive_write_open_memory = int function(archive*,void*,size_t,size_t*);
	alias da_archive_write_header = int function(archive*,archive_entry*);
	alias da_archive_write_data = la_ssize_t function(archive*,const(void)*,size_t);
	alias da_archive_write_data_block = la_ssize_t function(archive*,const(void)*,size_t,la_int64_t);
	alias da_archive_write_finish_entry = int function(archive*);
	alias da_archive_write_close = int function(archive*);
	alias da_archive_write_fail = int function(archive*);
	alias da_archive_write_free = int function(archive*);
	alias da_archive_write_set_format_option = int function(archive*,const(char)*,const(char)*,const(char)*);
	alias da_archive_write_set_filter_option = int function(archive*,const(char)*,const(char)*,const(char)*);
	alias da_archive_write_set_option = int function(archive*,const(char)*,const(char)*,const(char)*);
	alias da_archive_write_set_options = int function(archive*,const(char)*);
	alias da_archive_write_set_passphrase = int function(archive*,const(char)*);
	alias da_archive_write_set_passphrase_callback = int function(archive*,void*,archive_passphrase_callback*);
	alias da_archive_write_disk_new = archive* function();
	alias da_archive_write_disk_set_skip_file = int function(archive*,la_int64_t,la_int64_t);
	alias da_archive_write_disk_set_options = int function(archive*,int);
	alias da_archive_write_disk_set_standard_lookup = int function(archive*);
	alias da_archive_write_disk_set_group_lookup = int function(archive*,void*,la_int64_t function(void*,const(char)*,la_int64_t),void function(void*));
	alias da_archive_write_disk_set_user_lookup = int function(archive*,void*,la_int64_t function(void*,const(char)*,la_int64_t),void function(void*));
	alias da_archive_write_disk_gid = la_int64_t function(archive*,const(char)*,la_int64_t);
	alias da_archive_write_disk_uid = la_int64_t function(archive*,const(char)*,la_int64_t);
	alias da_archive_read_disk_new = archive* function();
	alias da_archive_read_disk_set_symlink_logical = int function(archive*);
	alias da_archive_read_disk_set_symlink_physical = int function(archive*);
	alias da_archive_read_disk_set_symlink_hybrid = int function(archive*);
	alias da_archive_read_disk_entry_from_file = int function(archive*,archive_entry*,int,const(stat)*);
	alias da_archive_read_disk_gname = const(char)* function(archive*,la_int64_t);
	alias da_archive_read_disk_uname = const(char)* function(archive*,la_int64_t);
	alias da_archive_read_disk_set_standard_lookup = int function(archive*);
	alias da_archive_read_disk_set_gname_lookup = int function(archive*,void*,const(char) function(void*,la_int64_t),void function(void*));
	alias da_archive_read_disk_set_uname_lookup = int function(archive*,void*,const(char) function(void*,la_int64_t),void function(void*));
	alias da_archive_read_disk_open = int function(archive*,const(char)*);
	alias da_archive_read_disk_open_w = int function(archive*,const(wchar_t)*);
	alias da_archive_read_disk_descend = int function(archive*);
	alias da_archive_read_disk_can_descend = int function(archive*);
	alias da_archive_read_disk_current_filesystem = int function(archive*);
	alias da_archive_read_disk_current_filesystem_is_synthetic = int function(archive*);
	alias da_archive_read_disk_current_filesystem_is_remote = int function(archive*);
	alias da_archive_read_disk_set_atime_restored = int function(archive*);
	alias da_archive_read_disk_set_behavior = int function(archive*,int);
	alias da_archive_read_disk_set_matching = int function(archive*,archive*,void function(archive*,void*,archive_entry*),void*);
	alias da_archive_read_disk_set_metadata_filter_callback = int function(archive*,int function(archive*,void*,archive_entry*),void*);
	alias da_archive_free = int function(archive*);
	alias da_archive_filter_count = la_int64_t function(archive*);
	alias da_archive_filter_code = int function(archive*,int);
	alias da_archive_filter_name = const(char)* function(archive*,int);
	alias da_archive_errno = int function(archive*);
	alias da_archive_error_string = const(char)* function(archive*);
	alias da_archive_format_name = const(char)* function(archive*);
	alias da_archive_format = int function(archive*);
	alias da_archive_clear_error = void function(archive*);
	alias da_archive_set_error = void function(archive*,int,const(char)*,...);
	alias da_archive_copy_error = void function(archive*,archive*);
	alias da_archive_file_count = int function(archive*);
	alias da_archive_match_new = archive* function();
	alias da_archive_match_free = int function(archive*);
	alias da_archive_match_excluded = int function(archive*,archive_entry*);
	alias da_archive_match_path_excluded = int function(archive*,archive_entry*);
	alias da_archive_match_exclude_pattern = int function(archive*,const(char)*);
	alias da_archive_match_exclude_pattern_w = int function(archive*,const(wchar_t)*);
	alias da_archive_match_exclude_pattern_from_file = int function(archive*,const(char)*,int);
	alias da_archive_match_exclude_pattern_from_file_w = int function(archive*,const(wchar_t)*,int);
	alias da_archive_match_include_pattern = int function(archive*,const(char)*);
	alias da_archive_match_include_pattern_w = int function(archive*,const(wchar_t)*);
	alias da_archive_match_include_pattern_from_file = int function(archive*,const(char)*,int);
	alias da_archive_match_include_pattern_from_file_w = int function(archive*,const(wchar_t)*,int);
	alias da_archive_match_path_unmatched_inclusions = int function(archive*);
	alias da_archive_match_path_unmatched_inclusions_next = int function(archive*,const(char)**);
	alias da_archive_match_path_unmatched_inclusions_next_w = int function(archive*,const(wchar_t)**);
	alias da_archive_match_time_excluded = int function(archive*,archive_entry*);
	alias da_archive_match_include_time = int function(archive*,int,time_t,long);
	alias da_archive_match_include_date = int function(archive*,int,const(char)*);
	alias da_archive_match_include_date_w = int function(archive*,int,const(wchar_t)*);
	alias da_archive_match_include_file_time = int function(archive*,int,const(char)*);
	alias da_archive_match_include_file_time_w = int function(archive*,int,const(wchar_t)*);
	alias da_archive_match_exclude_entry = int function(archive*,int,archive_entry*);
	alias da_archive_match_owner_excluded = int function(archive*,archive_entry *);
	alias da_archive_match_include_uid = int function(archive*,la_int64_t);
	alias da_archive_match_include_gid = int function(archive*,la_int64_t);
	alias da_archive_match_include_uname = int function(archive*,const(char)*);
	alias da_archive_match_include_uname_w = int function(archive*,const(wchar_t)*);
	alias da_archive_match_include_gname = int function(archive*,const(char)*);
	alias da_archive_match_include_gname_w = int function(archive*,const(wchar_t)*);
	alias da_archive_utility_string_sort = int function(char**);
	// archive_entry.h
	alias da_archive_entry_clear = archive_entry* function(archive_entry*);
	alias da_archive_entry_clone = archive_entry* function(archive_entry*);
	alias da_archive_entry_free = void function(archive_entry*);
	alias da_archive_entry_new = archive_entry* function();
	alias da_archive_entry_new2 = archive_entry* function(archive_entry*);
	alias da_archive_entry_atime = time_t function(archive_entry*);
	alias da_archive_entry_atime_nsec = long function(archive_entry*);
	alias da_archive_entry_atime_is_set = int function(archive_entry*);
	alias da_archive_entry_birthtime = time_t function(archive_entry*);
	alias da_archive_entry_birthtime_nsec = long function(archive_entry*);
	alias da_archive_entry_birthtime_is_set = int function(archive_entry*);
	alias da_archive_entry_ctime = time_t function(archive_entry*);
	alias da_archive_entry_ctime_nsec = long function(archive_entry*);
	alias da_archive_entry_ctime_is_set = int function(archive_entry*);
	alias da_archive_entry_dev = dev_t function(archive_entry*);
	alias da_archive_entry_dev_is_set = int function(archive_entry*);
	alias da_archive_entry_devmajor = dev_t function(archive_entry*);
	alias da_archive_entry_devminor = dev_t function(archive_entry*);
	alias da_archive_entry_filetype = LA_MODE_T function(archive_entry*);
	alias da_archive_entry_fflags = void function(archive_entry*,ulong,ulong);
	alias da_archive_entry_fflags_text = const(char)* function(archive_entry*);
	alias da_archive_entry_gid = la_int64_t function(archive_entry*);
	alias da_archive_entry_gname = const(char)* function(archive_entry*);
	alias da_archive_entry_gname_utf8 = const(char)* function(archive_entry*);
	alias da_archive_entry_gname_w = const(wchar_t)* function(archive_entry*);
	alias da_archive_entry_hardlink = const(char)* function(archive_entry*);
	alias da_archive_entry_hardlink_utf8 = const(char)* function(archive_entry*);
	alias da_archive_entry_hardlink_w = const(wchar_t)* function(archive_entry*);
	alias da_archive_entry_ino = la_int64_t function(archive_entry*);
	alias da_archive_entry_ino64 = la_int64_t function(archive_entry*);
	alias da_archive_entry_ino_is_set = int function(archive_entry*);
	alias da_archive_entry_mode = LA_MODE_T function(archive_entry*);
	alias da_archive_entry_mtime = time_t function(archive_entry*);
	alias da_archive_entry_mtime_nsec = long function(archive_entry*);
	alias da_archive_entry_mtime_is_set = int function(archive_entry*);
	alias da_archive_entry_nlink = uint function(archive_entry*);
	alias da_archive_entry_pathname = const(char)* function(archive_entry*);
	alias da_archive_entry_pathname_utf8 = const(char)* function(archive_entry*);
	alias da_archive_entry_pathname_w = const(wchar_t)* function(archive_entry*);
	alias da_archive_entry_perm = LA_MODE_T function(archive_entry*);
	alias da_archive_entry_rdev = dev_t function(archive_entry*);
	alias da_archive_entry_rdevmajor = dev_t function(archive_entry*);
	alias da_archive_entry_rdevminor = dev_t function(archive_entry*);
	alias da_archive_entry_sourcepath = const(char)* function(archive_entry*);
	alias da_archive_entry_sourcepath_w = const(wchar_t)* function(archive_entry*);
	alias da_archive_entry_size = la_int64_t function(archive_entry*);
	alias da_archive_entry_size_is_set = int function(archive_entry*);
	alias da_archive_entry_strmode = const(char)* function(archive_entry*);
	alias da_archive_entry_symlink = const(char)* function(archive_entry*);
	alias da_archive_entry_symlink_utf8 = const(char)* function(archive_entry*);
	alias da_archive_entry_symlink_w = const(wchar_t)* function(archive_entry*);
	alias da_archive_entry_uid = la_int64_t function(archive_entry*);
	alias da_archive_entry_uname = const(char)* function(archive_entry*);
	alias da_archive_entry_uname_utf8 = const(char)* function(archive_entry*);
	alias da_archive_entry_uname_w = const(wchar_t)* function(archive_entry*);
	alias da_archive_entry_is_data_encrypted = int function(archive_entry*);
	alias da_archive_entry_is_metadata_encrypted = int function(archive_entry*);
	alias da_archive_entry_is_encrypted = int function(archive_entry*);
	alias da_archive_entry_set_atime = void function(archive_entry*,time_t,long);
	alias da_archive_entry_unset_atime = void function(archive_entry*);
	version(Windows) alias da_archive_entry_copy_bhfi = void function(archive_entry*,BY_HANDLE_FILE_INFORMATION *);
	alias da_archive_entry_set_birthtime = void function(archive_entry*,time_t,long);
	alias da_archive_entry_unset_birthtime = void function(archive_entry*);
	alias da_archive_entry_set_ctime = void function(archive_entry*,time_t,long);
	alias da_archive_entry_unset_ctime = void function(archive_entry*);
	alias da_archive_entry_set_dev = void function(archive_entry*,dev_t);
	alias da_archive_entry_set_devmajor = void function(archive_entry*,dev_t);
	alias da_archive_entry_set_devminor = void function(archive_entry*,dev_t);
	alias da_archive_entry_set_filetype = void function(archive_entry*,uint);
	alias da_archive_entry_set_fflags = void function(archive_entry*,ulong,ulong);
	alias da_archive_entry_copy_fflags_text = const(char)* function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_fflags_text_w = const(wchar_t)* function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_set_gid = void function(archive_entry*,la_int64_t);
	alias da_archive_entry_set_gname = void function(archive_entry*,const(char)*);
	alias da_archive_entry_set_gname_utf8 = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_gname = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_gname_w = void function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_update_gname_utf8 = int function(archive_entry*,const(char)*);
	alias da_archive_entry_set_hardlink = void function(archive_entry*,const(char)*);
	alias da_archive_entry_set_hardlink_utf8 = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_hardlink = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_hardlink_w = void function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_update_hardlink_utf8 = int function(archive_entry*,const(char)*);
	alias da_archive_entry_set_ino = void function(archive_entry*,la_int64_t);
	alias da_archive_entry_set_ino64 = void function(archive_entry*,la_int64_t);
	alias da_archive_entry_set_link = void function(archive_entry*,const(char)*);
	alias da_archive_entry_set_link_utf8 = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_link = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_link_w = void function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_update_link_utf8 = int function(archive_entry*,const(char)*);
	alias da_archive_entry_set_mode = void function(archive_entry*,LA_MODE_T);
	alias da_archive_entry_set_mtime = void function(archive_entry*,time_t,long);
	alias da_archive_entry_unset_mtime = void function(archive_entry*);
	alias da_archive_entry_set_nlink = void function(archive_entry*,uint);
	alias da_archive_entry_set_pathname = void function(archive_entry*,const(char)*);
	alias da_archive_entry_set_pathname_utf8 = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_pathname = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_pathname_w = void function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_update_pathname_utf8 = int function(archive_entry*,const(char)*);
	alias da_archive_entry_set_perm = void function(archive_entry*,LA_MODE_T);
	alias da_archive_entry_set_rdev = void function(archive_entry*,dev_t);
	alias da_archive_entry_set_rdevmajor = void function(archive_entry*,dev_t);
	alias da_archive_entry_set_rdevminor = void function(archive_entry*,dev_t);
	alias da_archive_entry_set_size = void function(archive_entry*,la_int64_t);
	alias da_archive_entry_unset_size = void function(archive_entry*);
	alias da_archive_entry_copy_sourcepath = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_sourcepath_w = void function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_set_symlink = void function(archive_entry*,const(char)*);
	alias da_archive_entry_set_symlink_utf8 = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_symlink = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_symlink_w = void function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_update_symlink_utf8 = int function(archive_entry*,const(char)*);
	alias da_archive_entry_set_uid = void function(archive_entry*,la_int64_t);
	alias da_archive_entry_set_uname = void function(archive_entry*,const(char)*);
	alias da_archive_entry_set_uname_utf8 = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_uname = void function(archive_entry*,const(char)*);
	alias da_archive_entry_copy_uname_w = void function(archive_entry*,const(wchar_t)*);
	alias da_archive_entry_update_uname_utf8 = int function(archive_entry*,const(char)*);
	alias da_archive_entry_set_is_data_encrypted = void function(archive_entry*,char);
	alias da_archive_entry_set_is_metadata_encrypted = void function(archive_entry*,char);
	alias da_archive_entry_stat = const(stat)* function(archive_entry*);
	alias da_archive_entry_copy_stat = void function(archive_entry*,const(stat)*);
	alias da_archive_entry_mac_metadata = const(void)* function(archive_entry*,size_t*);
	alias da_archive_entry_copy_mac_metadata = void function(archive_entry*,const(void)*,size_t);
	alias da_archive_entry_acl_clear = void function(archive_entry*);
	alias da_archive_entry_acl_add_entry = int function(archive_entry*,int,int,int,int,const(char)*);
	alias da_archive_entry_acl_add_entry_w = int function(archive_entry*,int,int,int,int,const(wchar_t)*);
	alias da_archive_entry_acl_reset = int function(archive_entry*,int);
	alias da_archive_entry_acl_next = int function(archive_entry*,int,int*,int*,int*,int*,const(char)**);
	alias da_archive_entry_acl_next_w = int function(archive_entry*,int,int*,int*,int*,int*,const(wchar_t)**);
	alias da_archive_entry_acl_to_text_w = wchar_t* function(archive_entry*,la_ssize_t*,int);
	alias da_archive_entry_acl_to_text = char* function(archive_entry*,la_ssize_t*,int);
	alias da_archive_entry_acl_from_text_w = int function(archive_entry*,const(wchar_t)*,int);
	alias da_archive_entry_acl_from_text = int function(archive_entry*,const(char)*,int);
	alias da_archive_entry_acl_types = int function(archive_entry*);
	alias da_archive_entry_acl_count = int function(archive_entry*,int);
	alias da_archive_entry_acl = archive_acl* function(archive_entry*);
	alias da_archive_entry_xattr_clear = void function(archive_entry*);
	alias da_archive_entry_xattr_add_entry = void function(archive_entry*,const(char)*,const(void)*,size_t);
	alias da_archive_entry_xattr_count = int function(archive_entry*);
	alias da_archive_entry_xattr_reset = int function(archive_entry*);
	alias da_archive_entry_xattr_next = int function(archive_entry*,const(char)**,const(void)**,size_t*);
	alias da_archive_entry_sparse_clear = void function(archive_entry*);
	alias da_archive_entry_sparse_add_entry = void function(archive_entry*,la_int64_t,la_int64_t);
	alias da_archive_entry_sparse_count = int function(archive_entry*);
	alias da_archive_entry_sparse_reset = int function(archive_entry*);
	alias da_archive_entry_sparse_next = int function(archive_entry*,la_int64_t*,la_int64_t*);
	alias da_archive_entry_linkresolver_new = archive_entry_linkresolver* function();
	alias da_archive_entry_linkresolver_set_strategy = void function(archive_entry_linkresolver*,int);
	alias da_archive_entry_linkresolver_free = void function(archive_entry_linkresolver*);
	alias da_archive_entry_linkify = void function(archive_entry_linkresolver*,archive_entry**,archive_entry**);
	alias da_archive_entry_partial_links = archive_entry* function(archive_entry_linkresolver*,uint*);
}

__gshared {
	// archive.h
	da_archive_version_number archive_version_number;
	da_archive_version_string archive_version_string;
	da_archive_version_details archive_version_details;
	da_archive_zlib_version archive_zlib_version;
	da_archive_liblzma_version archive_liblzma_version;
	da_archive_bzlib_version archive_bzlib_version;
	da_archive_liblz4_version archive_liblz4_version;
	da_archive_read_new archive_read_new;
	da_archive_read_support_filter_all archive_read_support_filter_all;
	da_archive_read_support_filter_bzip2 archive_read_support_filter_bzip2;
	da_archive_read_support_filter_compress archive_read_support_filter_compress;
	da_archive_read_support_filter_gzip archive_read_support_filter_gzip;
	da_archive_read_support_filter_grzip archive_read_support_filter_grzip;
	da_archive_read_support_filter_lrzip archive_read_support_filter_lrzip;
	da_archive_read_support_filter_lz4 archive_read_support_filter_lz4;
	da_archive_read_support_filter_lzip archive_read_support_filter_lzip;
	da_archive_read_support_filter_lzma archive_read_support_filter_lzma;
	da_archive_read_support_filter_lzop archive_read_support_filter_lzop;
	da_archive_read_support_filter_none archive_read_support_filter_none;
	da_archive_read_support_filter_program archive_read_support_filter_program;
	da_archive_read_support_filter_program_signature archive_read_support_filter_program_signature;
	da_archive_read_support_filter_rpm archive_read_support_filter_rpm;
	da_archive_read_support_filter_uu archive_read_support_filter_uu;
	da_archive_read_support_filter_xz archive_read_support_filter_xz;
	da_archive_read_support_format_7zip archive_read_support_format_7zip;
	da_archive_read_support_format_all archive_read_support_format_all;
	da_archive_read_support_format_ar archive_read_support_format_ar;
	da_archive_read_support_format_by_code archive_read_support_format_by_code;
	da_archive_read_support_format_cab archive_read_support_format_cab;
	da_archive_read_support_format_cpio archive_read_support_format_cpio;
	da_archive_read_support_format_empty archive_read_support_format_empty;
	da_archive_read_support_format_gnutar archive_read_support_format_gnutar;
	da_archive_read_support_format_iso9660 archive_read_support_format_iso9660;
	da_archive_read_support_format_lha archive_read_support_format_lha;
	da_archive_read_support_format_mtree archive_read_support_format_mtree;
	da_archive_read_support_format_rar archive_read_support_format_rar;
	da_archive_read_support_format_raw archive_read_support_format_raw;
	da_archive_read_support_format_tar archive_read_support_format_tar;
	da_archive_read_support_format_warc archive_read_support_format_warc;
	da_archive_read_support_format_xar archive_read_support_format_xar;
	da_archive_read_support_format_zip archive_read_support_format_zip;
	da_archive_read_support_format_zip_streamable archive_read_support_format_zip_streamable;
	da_archive_read_support_format_zip_seekable archive_read_support_format_zip_seekable;
	da_archive_read_set_format archive_read_set_format;
	da_archive_read_append_filter archive_read_append_filter;
	da_archive_read_append_filter_program archive_read_append_filter_program;
	da_archive_read_append_filter_program_signature archive_read_append_filter_program_signature;
	da_archive_read_set_open_callback archive_read_set_open_callback;
	da_archive_read_set_read_callback archive_read_set_read_callback;
	da_archive_read_set_seek_callback archive_read_set_seek_callback;
	da_archive_read_set_skip_callback archive_read_set_skip_callback;
	da_archive_read_set_close_callback archive_read_set_close_callback;
	da_archive_read_set_switch_callback archive_read_set_switch_callback;
	da_archive_read_set_callback_data archive_read_set_callback_data;
	da_archive_read_set_callback_data2 archive_read_set_callback_data2;
	da_archive_read_add_callback_data archive_read_add_callback_data;
	da_archive_read_append_callback_data archive_read_append_callback_data;
	da_archive_read_prepend_callback_data archive_read_prepend_callback_data;
	da_archive_read_open1 archive_read_open1;
	da_archive_read_open archive_read_open;
	da_archive_read_open2 archive_read_open2;
	da_archive_read_open_filename archive_read_open_filename;
	da_archive_read_open_filenames archive_read_open_filenames;
	da_archive_read_open_filename_w archive_read_open_filename_w;
	da_archive_read_open_memory archive_read_open_memory;
	da_archive_read_open_memory2 archive_read_open_memory2;
	da_archive_read_open_fd archive_read_open_fd;
	da_archive_read_open_FILE archive_read_open_FILE;
	da_archive_read_next_header archive_read_next_header;
	da_archive_read_next_header2 archive_read_next_header2;
	da_archive_read_header_position archive_read_header_position;
	da_archive_read_has_encrypted_entries archive_read_has_encrypted_entries;
	da_archive_read_format_capabilities archive_read_format_capabilities;
	da_archive_read_data archive_read_data;
	da_archive_seek_data archive_seek_data;
	da_archive_read_data_block archive_read_data_block;
	da_archive_read_data_skip archive_read_data_skip;
	da_archive_read_data_into_fd archive_read_data_into_fd;
	da_archive_read_set_format_option archive_read_set_format_option;
	da_archive_read_set_filter_option archive_read_set_filter_option;
	da_archive_read_set_option archive_read_set_option;
	da_archive_read_set_options archive_read_set_options;
	da_archive_read_add_passphrase archive_read_add_passphrase;
	da_archive_read_set_passphrase_callback archive_read_set_passphrase_callback;
	da_archive_read_extract archive_read_extract;
	da_archive_read_extract2 archive_read_extract2;
	da_archive_read_extract_set_progress_callback archive_read_extract_set_progress_callback;
	da_archive_read_extract_set_skip_file archive_read_extract_set_skip_file;
	da_archive_read_close archive_read_close;
	da_archive_read_free archive_read_free;
	da_archive_write_new archive_write_new;
	da_archive_write_set_bytes_per_block archive_write_set_bytes_per_block;
	da_archive_write_get_bytes_per_block archive_write_get_bytes_per_block;
	da_archive_write_set_bytes_in_last_block archive_write_set_bytes_in_last_block;
	da_archive_write_get_bytes_in_last_block archive_write_get_bytes_in_last_block;
	da_archive_write_set_skip_file archive_write_set_skip_file;
	da_archive_write_add_filter archive_write_add_filter;
	da_archive_write_add_filter_by_name archive_write_add_filter_by_name;
	da_archive_write_add_filter_b64encode archive_write_add_filter_b64encode;
	da_archive_write_add_filter_bzip2 archive_write_add_filter_bzip2;
	da_archive_write_add_filter_compress archive_write_add_filter_compress;
	da_archive_write_add_filter_grzip archive_write_add_filter_grzip;
	da_archive_write_add_filter_gzip archive_write_add_filter_gzip;
	da_archive_write_add_filter_lrzip archive_write_add_filter_lrzip;
	da_archive_write_add_filter_lz4 archive_write_add_filter_lz4;
	da_archive_write_add_filter_lzip archive_write_add_filter_lzip;
	da_archive_write_add_filter_lzma archive_write_add_filter_lzma;
	da_archive_write_add_filter_lzop archive_write_add_filter_lzop;
	da_archive_write_add_filter_none archive_write_add_filter_none;
	da_archive_write_add_filter_program archive_write_add_filter_program;
	da_archive_write_add_filter_uuencode archive_write_add_filter_uuencode;
	da_archive_write_add_filter_xz archive_write_add_filter_xz;
	da_archive_write_set_format archive_write_set_format;
	da_archive_write_set_format_by_name archive_write_set_format_by_name;
	da_archive_write_set_format_7zip archive_write_set_format_7zip;
	da_archive_write_set_format_ar_bsd archive_write_set_format_ar_bsd;
	da_archive_write_set_format_ar_svr4 archive_write_set_format_ar_svr4;
	da_archive_write_set_format_cpio archive_write_set_format_cpio;
	da_archive_write_set_format_cpio_newc archive_write_set_format_cpio_newc;
	da_archive_write_set_format_gnutar archive_write_set_format_gnutar;
	da_archive_write_set_format_iso9660 archive_write_set_format_iso9660;
	da_archive_write_set_format_mtree archive_write_set_format_mtree;
	da_archive_write_set_format_mtree_classic archive_write_set_format_mtree_classic;
	da_archive_write_set_format_pax archive_write_set_format_pax;
	da_archive_write_set_format_pax_restricted archive_write_set_format_pax_restricted;
	da_archive_write_set_format_raw archive_write_set_format_raw;
	da_archive_write_set_format_shar archive_write_set_format_shar;
	da_archive_write_set_format_shar_dump archive_write_set_format_shar_dump;
	da_archive_write_set_format_ustar archive_write_set_format_ustar;
	da_archive_write_set_format_v7tar archive_write_set_format_v7tar;
	da_archive_write_set_format_warc archive_write_set_format_warc;
	da_archive_write_set_format_xar archive_write_set_format_xar;
	da_archive_write_set_format_zip archive_write_set_format_zip;
	da_archive_write_set_format_filter_by_ext archive_write_set_format_filter_by_ext;
	da_archive_write_set_format_filter_by_ext_def archive_write_set_format_filter_by_ext_def;
	da_archive_write_zip_set_compression_deflate archive_write_zip_set_compression_deflate;
	da_archive_write_zip_set_compression_store archive_write_zip_set_compression_store;
	da_archive_write_open archive_write_open;
	da_archive_write_open_fd archive_write_open_fd;
	da_archive_write_open_filename archive_write_open_filename;
	da_archive_write_open_filename_w archive_write_open_filename_w;
	da_archive_write_open_FILE archive_write_open_FILE;
	da_archive_write_open_memory archive_write_open_memory;
	da_archive_write_header archive_write_header;
	da_archive_write_data archive_write_data;
	da_archive_write_data_block archive_write_data_block;
	da_archive_write_finish_entry archive_write_finish_entry;
	da_archive_write_close archive_write_close;
	da_archive_write_fail archive_write_fail;
	da_archive_write_free archive_write_free;
	da_archive_write_set_format_option archive_write_set_format_option;
	da_archive_write_set_filter_option archive_write_set_filter_option;
	da_archive_write_set_option archive_write_set_option;
	da_archive_write_set_options archive_write_set_options;
	da_archive_write_set_passphrase archive_write_set_passphrase;
	da_archive_write_set_passphrase_callback archive_write_set_passphrase_callback;
	da_archive_write_disk_new archive_write_disk_new;
	da_archive_write_disk_set_skip_file archive_write_disk_set_skip_file;
	da_archive_write_disk_set_options archive_write_disk_set_options;
	da_archive_write_disk_set_standard_lookup archive_write_disk_set_standard_lookup;
	da_archive_write_disk_set_group_lookup archive_write_disk_set_group_lookup;
	da_archive_write_disk_set_user_lookup archive_write_disk_set_user_lookup;
	da_archive_write_disk_gid archive_write_disk_gid;
	da_archive_write_disk_uid archive_write_disk_uid;
	da_archive_read_disk_new archive_read_disk_new;
	da_archive_read_disk_set_symlink_logical archive_read_disk_set_symlink_logical;
	da_archive_read_disk_set_symlink_physical archive_read_disk_set_symlink_physical;
	da_archive_read_disk_set_symlink_hybrid archive_read_disk_set_symlink_hybrid;
	da_archive_read_disk_entry_from_file archive_read_disk_entry_from_file;
	da_archive_read_disk_gname archive_read_disk_gname;
	da_archive_read_disk_uname archive_read_disk_uname;
	da_archive_read_disk_set_standard_lookup archive_read_disk_set_standard_lookup;
	da_archive_read_disk_set_gname_lookup archive_read_disk_set_gname_lookup;
	da_archive_read_disk_set_uname_lookup archive_read_disk_set_uname_lookup;
	da_archive_read_disk_open archive_read_disk_open;
	da_archive_read_disk_open_w archive_read_disk_open_w;
	da_archive_read_disk_descend archive_read_disk_descend;
	da_archive_read_disk_can_descend archive_read_disk_can_descend;
	da_archive_read_disk_current_filesystem archive_read_disk_current_filesystem;
	da_archive_read_disk_current_filesystem_is_synthetic archive_read_disk_current_filesystem_is_synthetic;
	da_archive_read_disk_current_filesystem_is_remote archive_read_disk_current_filesystem_is_remote;
	da_archive_read_disk_set_atime_restored archive_read_disk_set_atime_restored;
	da_archive_read_disk_set_behavior archive_read_disk_set_behavior;
	da_archive_read_disk_set_matching archive_read_disk_set_matching;
	da_archive_read_disk_set_metadata_filter_callback archive_read_disk_set_metadata_filter_callback;
	da_archive_free archive_free;
	da_archive_filter_count archive_filter_count;
	da_archive_filter_code archive_filter_code;
	da_archive_filter_name archive_filter_name;
	da_archive_errno archive_errno;
	da_archive_error_string archive_error_string;
	da_archive_format_name archive_format_name;
	da_archive_format archive_format;
	da_archive_clear_error archive_clear_error;
	da_archive_set_error archive_set_error;
	da_archive_copy_error archive_copy_error;
	da_archive_file_count archive_file_count;
	da_archive_match_new archive_match_new;
	da_archive_match_free archive_match_free;
	da_archive_match_excluded archive_match_excluded;
	da_archive_match_path_excluded archive_match_path_excluded;
	da_archive_match_exclude_pattern archive_match_exclude_pattern;
	da_archive_match_exclude_pattern_w archive_match_exclude_pattern_w;
	da_archive_match_exclude_pattern_from_file archive_match_exclude_pattern_from_file;
	da_archive_match_exclude_pattern_from_file_w archive_match_exclude_pattern_from_file_w;
	da_archive_match_include_pattern archive_match_include_pattern;
	da_archive_match_include_pattern_w archive_match_include_pattern_w;
	da_archive_match_include_pattern_from_file archive_match_include_pattern_from_file;
	da_archive_match_include_pattern_from_file_w archive_match_include_pattern_from_file_w;
	da_archive_match_path_unmatched_inclusions archive_match_path_unmatched_inclusions;
	da_archive_match_path_unmatched_inclusions_next archive_match_path_unmatched_inclusions_next;
	da_archive_match_path_unmatched_inclusions_next_w archive_match_path_unmatched_inclusions_next_w;
	da_archive_match_time_excluded archive_match_time_excluded;
	da_archive_match_include_time archive_match_include_time;
	da_archive_match_include_date archive_match_include_date;
	da_archive_match_include_date_w archive_match_include_date_w;
	da_archive_match_include_file_time archive_match_include_file_time;
	da_archive_match_include_file_time_w archive_match_include_file_time_w;
	da_archive_match_exclude_entry archive_match_exclude_entry;
	da_archive_match_owner_excluded archive_match_owner_excluded;
	da_archive_match_include_uid archive_match_include_uid;
	da_archive_match_include_gid archive_match_include_gid;
	da_archive_match_include_uname archive_match_include_uname;
	da_archive_match_include_uname_w archive_match_include_uname_w;
	da_archive_match_include_gname archive_match_include_gname;
	da_archive_match_include_gname_w archive_match_include_gname_w;
	da_archive_utility_string_sort archive_utility_string_sort;
	// archive_entry.h
	da_archive_entry_clear archive_entry_clear;
	da_archive_entry_clone archive_entry_clone;
	da_archive_entry_free archive_entry_free;
	da_archive_entry_new archive_entry_new;
	da_archive_entry_new2 archive_entry_new2;
	da_archive_entry_atime archive_entry_atime;
	da_archive_entry_atime_nsec archive_entry_atime_nsec;
	da_archive_entry_atime_is_set archive_entry_atime_is_set;
	da_archive_entry_birthtime archive_entry_birthtime;
	da_archive_entry_birthtime_nsec archive_entry_birthtime_nsec;
	da_archive_entry_birthtime_is_set archive_entry_birthtime_is_set;
	da_archive_entry_ctime archive_entry_ctime;
	da_archive_entry_ctime_nsec archive_entry_ctime_nsec;
	da_archive_entry_ctime_is_set archive_entry_ctime_is_set;
	da_archive_entry_dev archive_entry_dev;
	da_archive_entry_dev_is_set archive_entry_dev_is_set;
	da_archive_entry_devmajor archive_entry_devmajor;
	da_archive_entry_devminor archive_entry_devminor;
	da_archive_entry_filetype archive_entry_filetype;
	da_archive_entry_fflags archive_entry_fflags;
	da_archive_entry_fflags_text archive_entry_fflags_text;
	da_archive_entry_gid archive_entry_gid;
	da_archive_entry_gname archive_entry_gname;
	da_archive_entry_gname_utf8 archive_entry_gname_utf8;
	da_archive_entry_gname_w archive_entry_gname_w;
	da_archive_entry_hardlink archive_entry_hardlink;
	da_archive_entry_hardlink_utf8 archive_entry_hardlink_utf8;
	da_archive_entry_hardlink_w archive_entry_hardlink_w;
	da_archive_entry_ino archive_entry_ino;
	da_archive_entry_ino64 archive_entry_ino64;
	da_archive_entry_ino_is_set archive_entry_ino_is_set;
	da_archive_entry_mode archive_entry_mode;
	da_archive_entry_mtime archive_entry_mtime;
	da_archive_entry_mtime_nsec archive_entry_mtime_nsec;
	da_archive_entry_mtime_is_set archive_entry_mtime_is_set;
	da_archive_entry_nlink archive_entry_nlink;
	da_archive_entry_pathname archive_entry_pathname;
	da_archive_entry_pathname_utf8 archive_entry_pathname_utf8;
	da_archive_entry_pathname_w archive_entry_pathname_w;
	da_archive_entry_perm archive_entry_perm;
	da_archive_entry_rdev archive_entry_rdev;
	da_archive_entry_rdevmajor archive_entry_rdevmajor;
	da_archive_entry_rdevminor archive_entry_rdevminor;
	da_archive_entry_sourcepath archive_entry_sourcepath;
	da_archive_entry_sourcepath_w archive_entry_sourcepath_w;
	da_archive_entry_size archive_entry_size;
	da_archive_entry_size_is_set archive_entry_size_is_set;
	da_archive_entry_strmode archive_entry_strmode;
	da_archive_entry_symlink archive_entry_symlink;
	da_archive_entry_symlink_utf8 archive_entry_symlink_utf8;
	da_archive_entry_symlink_w archive_entry_symlink_w;
	da_archive_entry_uid archive_entry_uid;
	da_archive_entry_uname archive_entry_uname;
	da_archive_entry_uname_utf8 archive_entry_uname_utf8;
	da_archive_entry_uname_w archive_entry_uname_w;
	da_archive_entry_is_data_encrypted archive_entry_is_data_encrypted;
	da_archive_entry_is_metadata_encrypted archive_entry_is_metadata_encrypted;
	da_archive_entry_is_encrypted archive_entry_is_encrypted;
	da_archive_entry_set_atime archive_entry_set_atime;
	da_archive_entry_unset_atime archive_entry_unset_atime;
	version(Windows) da_archive_entry_copy_bhfi archive_entry_copy_bhfi;
	da_archive_entry_set_birthtime archive_entry_set_birthtime;
	da_archive_entry_unset_birthtime archive_entry_unset_birthtime;
	da_archive_entry_set_ctime archive_entry_set_ctime;
	da_archive_entry_unset_ctime archive_entry_unset_ctime;
	da_archive_entry_set_dev archive_entry_set_dev;
	da_archive_entry_set_devmajor archive_entry_set_devmajor;
	da_archive_entry_set_devminor archive_entry_set_devminor;
	da_archive_entry_set_filetype archive_entry_set_filetype;
	da_archive_entry_set_fflags archive_entry_set_fflags;
	da_archive_entry_copy_fflags_text archive_entry_copy_fflags_text;
	da_archive_entry_copy_fflags_text_w archive_entry_copy_fflags_text_w;
	da_archive_entry_set_gid archive_entry_set_gid;
	da_archive_entry_set_gname archive_entry_set_gname;
	da_archive_entry_set_gname_utf8 archive_entry_set_gname_utf8;
	da_archive_entry_copy_gname archive_entry_copy_gname;
	da_archive_entry_copy_gname_w archive_entry_copy_gname_w;
	da_archive_entry_update_gname_utf8 archive_entry_update_gname_utf8;
	da_archive_entry_set_hardlink archive_entry_set_hardlink;
	da_archive_entry_set_hardlink_utf8 archive_entry_set_hardlink_utf8;
	da_archive_entry_copy_hardlink archive_entry_copy_hardlink;
	da_archive_entry_copy_hardlink_w archive_entry_copy_hardlink_w;
	da_archive_entry_update_hardlink_utf8 archive_entry_update_hardlink_utf8;
	da_archive_entry_set_ino archive_entry_set_ino;
	da_archive_entry_set_ino64 archive_entry_set_ino64;
	da_archive_entry_set_link archive_entry_set_link;
	da_archive_entry_set_link_utf8 archive_entry_set_link_utf8;
	da_archive_entry_copy_link archive_entry_copy_link;
	da_archive_entry_copy_link_w archive_entry_copy_link_w;
	da_archive_entry_update_link_utf8 archive_entry_update_link_utf8;
	da_archive_entry_set_mode archive_entry_set_mode;
	da_archive_entry_set_mtime archive_entry_set_mtime;
	da_archive_entry_unset_mtime archive_entry_unset_mtime;
	da_archive_entry_set_nlink archive_entry_set_nlink;
	da_archive_entry_set_pathname archive_entry_set_pathname;
	da_archive_entry_set_pathname_utf8 archive_entry_set_pathname_utf8;
	da_archive_entry_copy_pathname archive_entry_copy_pathname;
	da_archive_entry_copy_pathname_w archive_entry_copy_pathname_w;
	da_archive_entry_update_pathname_utf8 archive_entry_update_pathname_utf8;
	da_archive_entry_set_perm archive_entry_set_perm;
	da_archive_entry_set_rdev archive_entry_set_rdev;
	da_archive_entry_set_rdevmajor archive_entry_set_rdevmajor;
	da_archive_entry_set_rdevminor archive_entry_set_rdevminor;
	da_archive_entry_set_size archive_entry_set_size;
	da_archive_entry_unset_size archive_entry_unset_size;
	da_archive_entry_copy_sourcepath archive_entry_copy_sourcepath;
	da_archive_entry_copy_sourcepath_w archive_entry_copy_sourcepath_w;
	da_archive_entry_set_symlink archive_entry_set_symlink;
	da_archive_entry_set_symlink_utf8 archive_entry_set_symlink_utf8;
	da_archive_entry_copy_symlink archive_entry_copy_symlink;
	da_archive_entry_copy_symlink_w archive_entry_copy_symlink_w;
	da_archive_entry_update_symlink_utf8 archive_entry_update_symlink_utf8;
	da_archive_entry_set_uid archive_entry_set_uid;
	da_archive_entry_set_uname archive_entry_set_uname;
	da_archive_entry_set_uname_utf8 archive_entry_set_uname_utf8;
	da_archive_entry_copy_uname archive_entry_copy_uname;
	da_archive_entry_copy_uname_w archive_entry_copy_uname_w;
	da_archive_entry_update_uname_utf8 archive_entry_update_uname_utf8;
	da_archive_entry_set_is_data_encrypted archive_entry_set_is_data_encrypted;
	da_archive_entry_set_is_metadata_encrypted archive_entry_set_is_metadata_encrypted;
	da_archive_entry_stat archive_entry_stat;
	da_archive_entry_copy_stat archive_entry_copy_stat;
	da_archive_entry_mac_metadata archive_entry_mac_metadata;
	da_archive_entry_copy_mac_metadata archive_entry_copy_mac_metadata;
	da_archive_entry_acl_clear archive_entry_acl_clear;
	da_archive_entry_acl_add_entry archive_entry_acl_add_entry;
	da_archive_entry_acl_add_entry_w archive_entry_acl_add_entry_w;
	da_archive_entry_acl_reset archive_entry_acl_reset;
	da_archive_entry_acl_next archive_entry_acl_next;
	da_archive_entry_acl_next_w archive_entry_acl_next_w;
	da_archive_entry_acl_to_text_w archive_entry_acl_to_text_w;
	da_archive_entry_acl_to_text archive_entry_acl_to_text;
	da_archive_entry_acl_from_text_w archive_entry_acl_from_text_w;
	da_archive_entry_acl_from_text archive_entry_acl_from_text;
	da_archive_entry_acl_types archive_entry_acl_types;
	da_archive_entry_acl_count archive_entry_acl_count;
	da_archive_entry_acl archive_entry_acl;
	da_archive_entry_xattr_clear archive_entry_xattr_clear;
	da_archive_entry_xattr_add_entry archive_entry_xattr_add_entry;
	da_archive_entry_xattr_count archive_entry_xattr_count;
	da_archive_entry_xattr_reset archive_entry_xattr_reset;
	da_archive_entry_xattr_next archive_entry_xattr_next;
	da_archive_entry_sparse_clear archive_entry_sparse_clear;
	da_archive_entry_sparse_add_entry archive_entry_sparse_add_entry;
	da_archive_entry_sparse_count archive_entry_sparse_count;
	da_archive_entry_sparse_reset archive_entry_sparse_reset;
	da_archive_entry_sparse_next archive_entry_sparse_next;
	da_archive_entry_linkresolver_new archive_entry_linkresolver_new;
	da_archive_entry_linkresolver_set_strategy archive_entry_linkresolver_set_strategy;
	da_archive_entry_linkresolver_free archive_entry_linkresolver_free;
	da_archive_entry_linkify archive_entry_linkify;
	da_archive_entry_partial_links archive_entry_partial_links;
}

class DerelictLibArchiveLoader : SharedLibLoader {
	this() {
		super(libNames);
	}

	protected override void loadSymbols() {
		// archive.h
		bindFunc(cast(void**)&archive_version_number,"archive_version_number");
		bindFunc(cast(void**)&archive_version_string,"archive_version_string");
		bindFunc(cast(void**)&archive_version_details,"archive_version_details");
		bindFunc(cast(void**)&archive_zlib_version,"archive_zlib_version");
		bindFunc(cast(void**)&archive_liblzma_version,"archive_liblzma_version");
		bindFunc(cast(void**)&archive_bzlib_version,"archive_bzlib_version");
		bindFunc(cast(void**)&archive_liblz4_version,"archive_liblz4_version");
		bindFunc(cast(void**)&archive_read_new,"archive_read_new");
		bindFunc(cast(void**)&archive_read_support_filter_all,"archive_read_support_filter_all");
		bindFunc(cast(void**)&archive_read_support_filter_bzip2,"archive_read_support_filter_bzip2");
		bindFunc(cast(void**)&archive_read_support_filter_compress,"archive_read_support_filter_compress");
		bindFunc(cast(void**)&archive_read_support_filter_gzip,"archive_read_support_filter_gzip");
		bindFunc(cast(void**)&archive_read_support_filter_grzip,"archive_read_support_filter_grzip");
		bindFunc(cast(void**)&archive_read_support_filter_lrzip,"archive_read_support_filter_lrzip");
		bindFunc(cast(void**)&archive_read_support_filter_lz4,"archive_read_support_filter_lz4");
		bindFunc(cast(void**)&archive_read_support_filter_lzip,"archive_read_support_filter_lzip");
		bindFunc(cast(void**)&archive_read_support_filter_lzma,"archive_read_support_filter_lzma");
		bindFunc(cast(void**)&archive_read_support_filter_lzop,"archive_read_support_filter_lzop");
		bindFunc(cast(void**)&archive_read_support_filter_none,"archive_read_support_filter_none");
		bindFunc(cast(void**)&archive_read_support_filter_program,"archive_read_support_filter_program");
		bindFunc(cast(void**)&archive_read_support_filter_program_signature,"archive_read_support_filter_program_signature");
		bindFunc(cast(void**)&archive_read_support_filter_rpm,"archive_read_support_filter_rpm");
		bindFunc(cast(void**)&archive_read_support_filter_uu,"archive_read_support_filter_uu");
		bindFunc(cast(void**)&archive_read_support_filter_xz,"archive_read_support_filter_xz");
		bindFunc(cast(void**)&archive_read_support_format_7zip,"archive_read_support_format_7zip");
		bindFunc(cast(void**)&archive_read_support_format_all,"archive_read_support_format_all");
		bindFunc(cast(void**)&archive_read_support_format_ar,"archive_read_support_format_ar");
		bindFunc(cast(void**)&archive_read_support_format_by_code,"archive_read_support_format_by_code");
		bindFunc(cast(void**)&archive_read_support_format_cab,"archive_read_support_format_cab");
		bindFunc(cast(void**)&archive_read_support_format_cpio,"archive_read_support_format_cpio");
		bindFunc(cast(void**)&archive_read_support_format_empty,"archive_read_support_format_empty");
		bindFunc(cast(void**)&archive_read_support_format_gnutar,"archive_read_support_format_gnutar");
		bindFunc(cast(void**)&archive_read_support_format_iso9660,"archive_read_support_format_iso9660");
		bindFunc(cast(void**)&archive_read_support_format_lha,"archive_read_support_format_lha");
		bindFunc(cast(void**)&archive_read_support_format_mtree,"archive_read_support_format_mtree");
		bindFunc(cast(void**)&archive_read_support_format_rar,"archive_read_support_format_rar");
		bindFunc(cast(void**)&archive_read_support_format_raw,"archive_read_support_format_raw");
		bindFunc(cast(void**)&archive_read_support_format_tar,"archive_read_support_format_tar");
		bindFunc(cast(void**)&archive_read_support_format_warc,"archive_read_support_format_warc");
		bindFunc(cast(void**)&archive_read_support_format_xar,"archive_read_support_format_xar");
		bindFunc(cast(void**)&archive_read_support_format_zip,"archive_read_support_format_zip");
		bindFunc(cast(void**)&archive_read_support_format_zip_streamable,"archive_read_support_format_zip_streamable");
		bindFunc(cast(void**)&archive_read_support_format_zip_seekable,"archive_read_support_format_zip_seekable");
		bindFunc(cast(void**)&archive_read_set_format,"archive_read_set_format");
		bindFunc(cast(void**)&archive_read_append_filter,"archive_read_append_filter");
		bindFunc(cast(void**)&archive_read_append_filter_program,"archive_read_append_filter_program");
		bindFunc(cast(void**)&archive_read_append_filter_program_signature,"archive_read_append_filter_program_signature");
		bindFunc(cast(void**)&archive_read_set_open_callback,"archive_read_set_open_callback");
		bindFunc(cast(void**)&archive_read_set_read_callback,"archive_read_set_read_callback");
		bindFunc(cast(void**)&archive_read_set_seek_callback,"archive_read_set_seek_callback");
		bindFunc(cast(void**)&archive_read_set_skip_callback,"archive_read_set_skip_callback");
		bindFunc(cast(void**)&archive_read_set_close_callback,"archive_read_set_close_callback");
		bindFunc(cast(void**)&archive_read_set_switch_callback,"archive_read_set_switch_callback");
		bindFunc(cast(void**)&archive_read_set_callback_data,"archive_read_set_callback_data");
		bindFunc(cast(void**)&archive_read_set_callback_data2,"archive_read_set_callback_data2");
		bindFunc(cast(void**)&archive_read_add_callback_data,"archive_read_add_callback_data");
		bindFunc(cast(void**)&archive_read_append_callback_data,"archive_read_append_callback_data");
		bindFunc(cast(void**)&archive_read_prepend_callback_data,"archive_read_prepend_callback_data");
		bindFunc(cast(void**)&archive_read_open1,"archive_read_open1");
		bindFunc(cast(void**)&archive_read_open,"archive_read_open");
		bindFunc(cast(void**)&archive_read_open2,"archive_read_open2");
		bindFunc(cast(void**)&archive_read_open_filename,"archive_read_open_filename");
		bindFunc(cast(void**)&archive_read_open_filenames,"archive_read_open_filenames");
		bindFunc(cast(void**)&archive_read_open_filename_w,"archive_read_open_filename_w");
		bindFunc(cast(void**)&archive_read_open_memory,"archive_read_open_memory");
		bindFunc(cast(void**)&archive_read_open_memory2,"archive_read_open_memory2");
		bindFunc(cast(void**)&archive_read_open_fd,"archive_read_open_fd");
		bindFunc(cast(void**)&archive_read_open_FILE,"archive_read_open_FILE");
		bindFunc(cast(void**)&archive_read_next_header,"archive_read_next_header");
		bindFunc(cast(void**)&archive_read_next_header2,"archive_read_next_header2");
		bindFunc(cast(void**)&archive_read_header_position,"archive_read_header_position");
		bindFunc(cast(void**)&archive_read_has_encrypted_entries,"archive_read_has_encrypted_entries");
		bindFunc(cast(void**)&archive_read_format_capabilities,"archive_read_format_capabilities");
		bindFunc(cast(void**)&archive_read_data,"archive_read_data");
		bindFunc(cast(void**)&archive_seek_data,"archive_seek_data");
		bindFunc(cast(void**)&archive_read_data_block,"archive_read_data_block");
		bindFunc(cast(void**)&archive_read_data_skip,"archive_read_data_skip");
		bindFunc(cast(void**)&archive_read_data_into_fd,"archive_read_data_into_fd");
		bindFunc(cast(void**)&archive_read_set_format_option,"archive_read_set_format_option");
		bindFunc(cast(void**)&archive_read_set_filter_option,"archive_read_set_filter_option");
		bindFunc(cast(void**)&archive_read_set_option,"archive_read_set_option");
		bindFunc(cast(void**)&archive_read_set_options,"archive_read_set_options");
		bindFunc(cast(void**)&archive_read_add_passphrase,"archive_read_add_passphrase");
		bindFunc(cast(void**)&archive_read_set_passphrase_callback,"archive_read_set_passphrase_callback");
		bindFunc(cast(void**)&archive_read_extract,"archive_read_extract");
		bindFunc(cast(void**)&archive_read_extract2,"archive_read_extract2");
		bindFunc(cast(void**)&archive_read_extract_set_progress_callback,"archive_read_extract_set_progress_callback");
		bindFunc(cast(void**)&archive_read_extract_set_skip_file,"archive_read_extract_set_skip_file");
		bindFunc(cast(void**)&archive_read_close,"archive_read_close");
		bindFunc(cast(void**)&archive_read_free,"archive_read_free");
		bindFunc(cast(void**)&archive_write_new,"archive_write_new");
		bindFunc(cast(void**)&archive_write_set_bytes_per_block,"archive_write_set_bytes_per_block");
		bindFunc(cast(void**)&archive_write_get_bytes_per_block,"archive_write_get_bytes_per_block");
		bindFunc(cast(void**)&archive_write_set_bytes_in_last_block,"archive_write_set_bytes_in_last_block");
		bindFunc(cast(void**)&archive_write_get_bytes_in_last_block,"archive_write_get_bytes_in_last_block");
		bindFunc(cast(void**)&archive_write_set_skip_file,"archive_write_set_skip_file");
		bindFunc(cast(void**)&archive_write_add_filter,"archive_write_add_filter");
		bindFunc(cast(void**)&archive_write_add_filter_by_name,"archive_write_add_filter_by_name");
		bindFunc(cast(void**)&archive_write_add_filter_b64encode,"archive_write_add_filter_b64encode");
		bindFunc(cast(void**)&archive_write_add_filter_bzip2,"archive_write_add_filter_bzip2");
		bindFunc(cast(void**)&archive_write_add_filter_compress,"archive_write_add_filter_compress");
		bindFunc(cast(void**)&archive_write_add_filter_grzip,"archive_write_add_filter_grzip");
		bindFunc(cast(void**)&archive_write_add_filter_gzip,"archive_write_add_filter_gzip");
		bindFunc(cast(void**)&archive_write_add_filter_lrzip,"archive_write_add_filter_lrzip");
		bindFunc(cast(void**)&archive_write_add_filter_lz4,"archive_write_add_filter_lz4");
		bindFunc(cast(void**)&archive_write_add_filter_lzip,"archive_write_add_filter_lzip");
		bindFunc(cast(void**)&archive_write_add_filter_lzma,"archive_write_add_filter_lzma");
		bindFunc(cast(void**)&archive_write_add_filter_lzop,"archive_write_add_filter_lzop");
		bindFunc(cast(void**)&archive_write_add_filter_none,"archive_write_add_filter_none");
		bindFunc(cast(void**)&archive_write_add_filter_program,"archive_write_add_filter_program");
		bindFunc(cast(void**)&archive_write_add_filter_uuencode,"archive_write_add_filter_uuencode");
		bindFunc(cast(void**)&archive_write_add_filter_xz,"archive_write_add_filter_xz");
		bindFunc(cast(void**)&archive_write_set_format,"archive_write_set_format");
		bindFunc(cast(void**)&archive_write_set_format_by_name,"archive_write_set_format_by_name");
		bindFunc(cast(void**)&archive_write_set_format_7zip,"archive_write_set_format_7zip");
		bindFunc(cast(void**)&archive_write_set_format_ar_bsd,"archive_write_set_format_ar_bsd");
		bindFunc(cast(void**)&archive_write_set_format_ar_svr4,"archive_write_set_format_ar_svr4");
		bindFunc(cast(void**)&archive_write_set_format_cpio,"archive_write_set_format_cpio");
		bindFunc(cast(void**)&archive_write_set_format_cpio_newc,"archive_write_set_format_cpio_newc");
		bindFunc(cast(void**)&archive_write_set_format_gnutar,"archive_write_set_format_gnutar");
		bindFunc(cast(void**)&archive_write_set_format_iso9660,"archive_write_set_format_iso9660");
		bindFunc(cast(void**)&archive_write_set_format_mtree,"archive_write_set_format_mtree");
		bindFunc(cast(void**)&archive_write_set_format_mtree_classic,"archive_write_set_format_mtree_classic");
		bindFunc(cast(void**)&archive_write_set_format_pax,"archive_write_set_format_pax");
		bindFunc(cast(void**)&archive_write_set_format_pax_restricted,"archive_write_set_format_pax_restricted");
		bindFunc(cast(void**)&archive_write_set_format_raw,"archive_write_set_format_raw");
		bindFunc(cast(void**)&archive_write_set_format_shar,"archive_write_set_format_shar");
		bindFunc(cast(void**)&archive_write_set_format_shar_dump,"archive_write_set_format_shar_dump");
		bindFunc(cast(void**)&archive_write_set_format_ustar,"archive_write_set_format_ustar");
		bindFunc(cast(void**)&archive_write_set_format_v7tar,"archive_write_set_format_v7tar");
		bindFunc(cast(void**)&archive_write_set_format_warc,"archive_write_set_format_warc");
		bindFunc(cast(void**)&archive_write_set_format_xar,"archive_write_set_format_xar");
		bindFunc(cast(void**)&archive_write_set_format_zip,"archive_write_set_format_zip");
		bindFunc(cast(void**)&archive_write_set_format_filter_by_ext,"archive_write_set_format_filter_by_ext");
		bindFunc(cast(void**)&archive_write_set_format_filter_by_ext_def,"archive_write_set_format_filter_by_ext_def");
		bindFunc(cast(void**)&archive_write_zip_set_compression_deflate,"archive_write_zip_set_compression_deflate");
		bindFunc(cast(void**)&archive_write_zip_set_compression_store,"archive_write_zip_set_compression_store");
		bindFunc(cast(void**)&archive_write_open,"archive_write_open");
		bindFunc(cast(void**)&archive_write_open_fd,"archive_write_open_fd");
		bindFunc(cast(void**)&archive_write_open_filename,"archive_write_open_filename");
		bindFunc(cast(void**)&archive_write_open_filename_w,"archive_write_open_filename_w");
		bindFunc(cast(void**)&archive_write_open_FILE,"archive_write_open_FILE");
		bindFunc(cast(void**)&archive_write_open_memory,"archive_write_open_memory");
		bindFunc(cast(void**)&archive_write_header,"archive_write_header");
		bindFunc(cast(void**)&archive_write_data,"archive_write_data");
		bindFunc(cast(void**)&archive_write_data_block,"archive_write_data_block");
		bindFunc(cast(void**)&archive_write_finish_entry,"archive_write_finish_entry");
		bindFunc(cast(void**)&archive_write_close,"archive_write_close");
		bindFunc(cast(void**)&archive_write_fail,"archive_write_fail");
		bindFunc(cast(void**)&archive_write_free,"archive_write_free");
		bindFunc(cast(void**)&archive_write_set_format_option,"archive_write_set_format_option");
		bindFunc(cast(void**)&archive_write_set_filter_option,"archive_write_set_filter_option");
		bindFunc(cast(void**)&archive_write_set_option,"archive_write_set_option");
		bindFunc(cast(void**)&archive_write_set_options,"archive_write_set_options");
		bindFunc(cast(void**)&archive_write_set_passphrase,"archive_write_set_passphrase");
		bindFunc(cast(void**)&archive_write_set_passphrase_callback,"archive_write_set_passphrase_callback");
		bindFunc(cast(void**)&archive_write_disk_new,"archive_write_disk_new");
		bindFunc(cast(void**)&archive_write_disk_set_skip_file,"archive_write_disk_set_skip_file");
		bindFunc(cast(void**)&archive_write_disk_set_options,"archive_write_disk_set_options");
		bindFunc(cast(void**)&archive_write_disk_set_standard_lookup,"archive_write_disk_set_standard_lookup");
		bindFunc(cast(void**)&archive_write_disk_set_group_lookup,"archive_write_disk_set_group_lookup");
		bindFunc(cast(void**)&archive_write_disk_set_user_lookup,"archive_write_disk_set_user_lookup");
		bindFunc(cast(void**)&archive_write_disk_gid,"archive_write_disk_gid");
		bindFunc(cast(void**)&archive_write_disk_uid,"archive_write_disk_uid");
		bindFunc(cast(void**)&archive_read_disk_new,"archive_read_disk_new");
		bindFunc(cast(void**)&archive_read_disk_set_symlink_logical,"archive_read_disk_set_symlink_logical");
		bindFunc(cast(void**)&archive_read_disk_set_symlink_physical,"archive_read_disk_set_symlink_physical");
		bindFunc(cast(void**)&archive_read_disk_set_symlink_hybrid,"archive_read_disk_set_symlink_hybrid");
		bindFunc(cast(void**)&archive_read_disk_entry_from_file,"archive_read_disk_entry_from_file");
		bindFunc(cast(void**)&archive_read_disk_gname,"archive_read_disk_gname");
		bindFunc(cast(void**)&archive_read_disk_uname,"archive_read_disk_uname");
		bindFunc(cast(void**)&archive_read_disk_set_standard_lookup,"archive_read_disk_set_standard_lookup");
		bindFunc(cast(void**)&archive_read_disk_set_gname_lookup,"archive_read_disk_set_gname_lookup");
		bindFunc(cast(void**)&archive_read_disk_set_uname_lookup,"archive_read_disk_set_uname_lookup");
		bindFunc(cast(void**)&archive_read_disk_open,"archive_read_disk_open");
		bindFunc(cast(void**)&archive_read_disk_open_w,"archive_read_disk_open_w");
		bindFunc(cast(void**)&archive_read_disk_descend,"archive_read_disk_descend");
		bindFunc(cast(void**)&archive_read_disk_can_descend,"archive_read_disk_can_descend");
		bindFunc(cast(void**)&archive_read_disk_current_filesystem,"archive_read_disk_current_filesystem");
		bindFunc(cast(void**)&archive_read_disk_current_filesystem_is_synthetic,"archive_read_disk_current_filesystem_is_synthetic");
		bindFunc(cast(void**)&archive_read_disk_current_filesystem_is_remote,"archive_read_disk_current_filesystem_is_remote");
		bindFunc(cast(void**)&archive_read_disk_set_atime_restored,"archive_read_disk_set_atime_restored");
		bindFunc(cast(void**)&archive_read_disk_set_behavior,"archive_read_disk_set_behavior");
		bindFunc(cast(void**)&archive_read_disk_set_matching,"archive_read_disk_set_matching");
		bindFunc(cast(void**)&archive_read_disk_set_metadata_filter_callback,"archive_read_disk_set_metadata_filter_callback");
		bindFunc(cast(void**)&archive_free,"archive_free");
		bindFunc(cast(void**)&archive_filter_count,"archive_filter_count");
		bindFunc(cast(void**)&archive_filter_code,"archive_filter_code");
		bindFunc(cast(void**)&archive_filter_name,"archive_filter_name");
		bindFunc(cast(void**)&archive_errno,"archive_errno");
		bindFunc(cast(void**)&archive_error_string,"archive_error_string");
		bindFunc(cast(void**)&archive_format_name,"archive_format_name");
		bindFunc(cast(void**)&archive_format,"archive_format");
		bindFunc(cast(void**)&archive_clear_error,"archive_clear_error");
		bindFunc(cast(void**)&archive_set_error,"archive_set_error");
		bindFunc(cast(void**)&archive_copy_error,"archive_copy_error");
		bindFunc(cast(void**)&archive_file_count,"archive_file_count");
		bindFunc(cast(void**)&archive_match_new,"archive_match_new");
		bindFunc(cast(void**)&archive_match_free,"archive_match_free");
		bindFunc(cast(void**)&archive_match_excluded,"archive_match_excluded");
		bindFunc(cast(void**)&archive_match_path_excluded,"archive_match_path_excluded");
		bindFunc(cast(void**)&archive_match_exclude_pattern,"archive_match_exclude_pattern");
		bindFunc(cast(void**)&archive_match_exclude_pattern_w,"archive_match_exclude_pattern_w");
		bindFunc(cast(void**)&archive_match_exclude_pattern_from_file,"archive_match_exclude_pattern_from_file");
		bindFunc(cast(void**)&archive_match_exclude_pattern_from_file_w,"archive_match_exclude_pattern_from_file_w");
		bindFunc(cast(void**)&archive_match_include_pattern,"archive_match_include_pattern");
		bindFunc(cast(void**)&archive_match_include_pattern_w,"archive_match_include_pattern_w");
		bindFunc(cast(void**)&archive_match_include_pattern_from_file,"archive_match_include_pattern_from_file");
		bindFunc(cast(void**)&archive_match_include_pattern_from_file_w,"archive_match_include_pattern_from_file_w");
		bindFunc(cast(void**)&archive_match_path_unmatched_inclusions,"archive_match_path_unmatched_inclusions");
		bindFunc(cast(void**)&archive_match_path_unmatched_inclusions_next,"archive_match_path_unmatched_inclusions_next");
		bindFunc(cast(void**)&archive_match_path_unmatched_inclusions_next_w,"archive_match_path_unmatched_inclusions_next_w");
		bindFunc(cast(void**)&archive_match_time_excluded,"archive_match_time_excluded");
		bindFunc(cast(void**)&archive_match_include_time,"archive_match_include_time");
		bindFunc(cast(void**)&archive_match_include_date,"archive_match_include_date");
		bindFunc(cast(void**)&archive_match_include_date_w,"archive_match_include_date_w");
		bindFunc(cast(void**)&archive_match_include_file_time,"archive_match_include_file_time");
		bindFunc(cast(void**)&archive_match_include_file_time_w,"archive_match_include_file_time_w");
		bindFunc(cast(void**)&archive_match_exclude_entry,"archive_match_exclude_entry");
		bindFunc(cast(void**)&archive_match_owner_excluded,"archive_match_owner_excluded");
		bindFunc(cast(void**)&archive_match_include_uid,"archive_match_include_uid");
		bindFunc(cast(void**)&archive_match_include_gid,"archive_match_include_gid");
		bindFunc(cast(void**)&archive_match_include_uname,"archive_match_include_uname");
		bindFunc(cast(void**)&archive_match_include_uname_w,"archive_match_include_uname_w");
		bindFunc(cast(void**)&archive_match_include_gname,"archive_match_include_gname");
		bindFunc(cast(void**)&archive_match_include_gname_w,"archive_match_include_gname_w");
		bindFunc(cast(void**)&archive_utility_string_sort,"archive_utility_string_sort");
		// archive_entry.h
		bindFunc(cast(void**)&archive_entry_clear,"archive_entry_clear");
		bindFunc(cast(void**)&archive_entry_clone,"archive_entry_clone");
		bindFunc(cast(void**)&archive_entry_free,"archive_entry_free");
		bindFunc(cast(void**)&archive_entry_new,"archive_entry_new");
		bindFunc(cast(void**)&archive_entry_new2,"archive_entry_new2");
		bindFunc(cast(void**)&archive_entry_atime,"archive_entry_atime");
		bindFunc(cast(void**)&archive_entry_atime_nsec,"archive_entry_atime_nsec");
		bindFunc(cast(void**)&archive_entry_atime_is_set,"archive_entry_atime_is_set");
		bindFunc(cast(void**)&archive_entry_birthtime,"archive_entry_birthtime");
		bindFunc(cast(void**)&archive_entry_birthtime_nsec,"archive_entry_birthtime_nsec");
		bindFunc(cast(void**)&archive_entry_birthtime_is_set,"archive_entry_birthtime_is_set");
		bindFunc(cast(void**)&archive_entry_ctime,"archive_entry_ctime");
		bindFunc(cast(void**)&archive_entry_ctime_nsec,"archive_entry_ctime_nsec");
		bindFunc(cast(void**)&archive_entry_ctime_is_set,"archive_entry_ctime_is_set");
		bindFunc(cast(void**)&archive_entry_dev,"archive_entry_dev");
		bindFunc(cast(void**)&archive_entry_dev_is_set,"archive_entry_dev_is_set");
		bindFunc(cast(void**)&archive_entry_devmajor,"archive_entry_devmajor");
		bindFunc(cast(void**)&archive_entry_devminor,"archive_entry_devminor");
		bindFunc(cast(void**)&archive_entry_filetype,"archive_entry_filetype");
		bindFunc(cast(void**)&archive_entry_fflags,"archive_entry_fflags");
		bindFunc(cast(void**)&archive_entry_fflags_text,"archive_entry_fflags_text");
		bindFunc(cast(void**)&archive_entry_gid,"archive_entry_gid");
		bindFunc(cast(void**)&archive_entry_gname,"archive_entry_gname");
		bindFunc(cast(void**)&archive_entry_gname_utf8,"archive_entry_gname_utf8");
		bindFunc(cast(void**)&archive_entry_gname_w,"archive_entry_gname_w");
		bindFunc(cast(void**)&archive_entry_hardlink,"archive_entry_hardlink");
		bindFunc(cast(void**)&archive_entry_hardlink_utf8,"archive_entry_hardlink_utf8");
		bindFunc(cast(void**)&archive_entry_hardlink_w,"archive_entry_hardlink_w");
		bindFunc(cast(void**)&archive_entry_ino,"archive_entry_ino");
		bindFunc(cast(void**)&archive_entry_ino64,"archive_entry_ino64");
		bindFunc(cast(void**)&archive_entry_ino_is_set,"archive_entry_ino_is_set");
		bindFunc(cast(void**)&archive_entry_mode,"archive_entry_mode");
		bindFunc(cast(void**)&archive_entry_mtime,"archive_entry_mtime");
		bindFunc(cast(void**)&archive_entry_mtime_nsec,"archive_entry_mtime_nsec");
		bindFunc(cast(void**)&archive_entry_mtime_is_set,"archive_entry_mtime_is_set");
		bindFunc(cast(void**)&archive_entry_nlink,"archive_entry_nlink");
		bindFunc(cast(void**)&archive_entry_pathname,"archive_entry_pathname");
		bindFunc(cast(void**)&archive_entry_pathname_utf8,"archive_entry_pathname_utf8");
		bindFunc(cast(void**)&archive_entry_pathname_w,"archive_entry_pathname_w");
		bindFunc(cast(void**)&archive_entry_perm,"archive_entry_perm");
		bindFunc(cast(void**)&archive_entry_rdev,"archive_entry_rdev");
		bindFunc(cast(void**)&archive_entry_rdevmajor,"archive_entry_rdevmajor");
		bindFunc(cast(void**)&archive_entry_rdevminor,"archive_entry_rdevminor");
		bindFunc(cast(void**)&archive_entry_sourcepath,"archive_entry_sourcepath");
		bindFunc(cast(void**)&archive_entry_sourcepath_w,"archive_entry_sourcepath_w");
		bindFunc(cast(void**)&archive_entry_size,"archive_entry_size");
		bindFunc(cast(void**)&archive_entry_size_is_set,"archive_entry_size_is_set");
		bindFunc(cast(void**)&archive_entry_strmode,"archive_entry_strmode");
		bindFunc(cast(void**)&archive_entry_symlink,"archive_entry_symlink");
		bindFunc(cast(void**)&archive_entry_symlink_utf8,"archive_entry_symlink_utf8");
		bindFunc(cast(void**)&archive_entry_symlink_w,"archive_entry_symlink_w");
		bindFunc(cast(void**)&archive_entry_uid,"archive_entry_uid");
		bindFunc(cast(void**)&archive_entry_uname,"archive_entry_uname");
		bindFunc(cast(void**)&archive_entry_uname_utf8,"archive_entry_uname_utf8");
		bindFunc(cast(void**)&archive_entry_uname_w,"archive_entry_uname_w");
		bindFunc(cast(void**)&archive_entry_is_data_encrypted,"archive_entry_is_data_encrypted");
		bindFunc(cast(void**)&archive_entry_is_metadata_encrypted,"archive_entry_is_metadata_encrypted");
		bindFunc(cast(void**)&archive_entry_is_encrypted,"archive_entry_is_encrypted");
		bindFunc(cast(void**)&archive_entry_set_atime,"archive_entry_set_atime");
		bindFunc(cast(void**)&archive_entry_unset_atime,"archive_entry_unset_atime");
		version(Windows) bindFunc(cast(void**)&archive_entry_copy_bhfi,"archive_entry_copy_bhfi");
		bindFunc(cast(void**)&archive_entry_set_birthtime,"archive_entry_set_birthtime");
		bindFunc(cast(void**)&archive_entry_unset_birthtime,"archive_entry_unset_birthtime");
		bindFunc(cast(void**)&archive_entry_set_ctime,"archive_entry_set_ctime");
		bindFunc(cast(void**)&archive_entry_unset_ctime,"archive_entry_unset_ctime");
		bindFunc(cast(void**)&archive_entry_set_dev,"archive_entry_set_dev");
		bindFunc(cast(void**)&archive_entry_set_devmajor,"archive_entry_set_devmajor");
		bindFunc(cast(void**)&archive_entry_set_devminor,"archive_entry_set_devminor");
		bindFunc(cast(void**)&archive_entry_set_filetype,"archive_entry_set_filetype");
		bindFunc(cast(void**)&archive_entry_set_fflags,"archive_entry_set_fflags");
		bindFunc(cast(void**)&archive_entry_copy_fflags_text,"archive_entry_copy_fflags_text");
		bindFunc(cast(void**)&archive_entry_copy_fflags_text_w,"archive_entry_copy_fflags_text_w");
		bindFunc(cast(void**)&archive_entry_set_gid,"archive_entry_set_gid");
		bindFunc(cast(void**)&archive_entry_set_gname,"archive_entry_set_gname");
		bindFunc(cast(void**)&archive_entry_set_gname_utf8,"archive_entry_set_gname_utf8");
		bindFunc(cast(void**)&archive_entry_copy_gname,"archive_entry_copy_gname");
		bindFunc(cast(void**)&archive_entry_copy_gname_w,"archive_entry_copy_gname_w");
		bindFunc(cast(void**)&archive_entry_update_gname_utf8,"archive_entry_update_gname_utf8");
		bindFunc(cast(void**)&archive_entry_set_hardlink,"archive_entry_set_hardlink");
		bindFunc(cast(void**)&archive_entry_set_hardlink_utf8,"archive_entry_set_hardlink_utf8");
		bindFunc(cast(void**)&archive_entry_copy_hardlink,"archive_entry_copy_hardlink");
		bindFunc(cast(void**)&archive_entry_copy_hardlink_w,"archive_entry_copy_hardlink_w");
		bindFunc(cast(void**)&archive_entry_update_hardlink_utf8,"archive_entry_update_hardlink_utf8");
		bindFunc(cast(void**)&archive_entry_set_ino,"archive_entry_set_ino");
		bindFunc(cast(void**)&archive_entry_set_ino64,"archive_entry_set_ino64");
		bindFunc(cast(void**)&archive_entry_set_link,"archive_entry_set_link");
		bindFunc(cast(void**)&archive_entry_set_link_utf8,"archive_entry_set_link_utf8");
		bindFunc(cast(void**)&archive_entry_copy_link,"archive_entry_copy_link");
		bindFunc(cast(void**)&archive_entry_copy_link_w,"archive_entry_copy_link_w");
		bindFunc(cast(void**)&archive_entry_update_link_utf8,"archive_entry_update_link_utf8");
		bindFunc(cast(void**)&archive_entry_set_mode,"archive_entry_set_mode");
		bindFunc(cast(void**)&archive_entry_set_mtime,"archive_entry_set_mtime");
		bindFunc(cast(void**)&archive_entry_unset_mtime,"archive_entry_unset_mtime");
		bindFunc(cast(void**)&archive_entry_set_nlink,"archive_entry_set_nlink");
		bindFunc(cast(void**)&archive_entry_set_pathname,"archive_entry_set_pathname");
		bindFunc(cast(void**)&archive_entry_set_pathname_utf8,"archive_entry_set_pathname_utf8");
		bindFunc(cast(void**)&archive_entry_copy_pathname,"archive_entry_copy_pathname");
		bindFunc(cast(void**)&archive_entry_copy_pathname_w,"archive_entry_copy_pathname_w");
		bindFunc(cast(void**)&archive_entry_update_pathname_utf8,"archive_entry_update_pathname_utf8");
		bindFunc(cast(void**)&archive_entry_set_perm,"archive_entry_set_perm");
		bindFunc(cast(void**)&archive_entry_set_rdev,"archive_entry_set_rdev");
		bindFunc(cast(void**)&archive_entry_set_rdevmajor,"archive_entry_set_rdevmajor");
		bindFunc(cast(void**)&archive_entry_set_rdevminor,"archive_entry_set_rdevminor");
		bindFunc(cast(void**)&archive_entry_set_size,"archive_entry_set_size");
		bindFunc(cast(void**)&archive_entry_unset_size,"archive_entry_unset_size");
		bindFunc(cast(void**)&archive_entry_copy_sourcepath,"archive_entry_copy_sourcepath");
		bindFunc(cast(void**)&archive_entry_copy_sourcepath_w,"archive_entry_copy_sourcepath_w");
		bindFunc(cast(void**)&archive_entry_set_symlink,"archive_entry_set_symlink");
		bindFunc(cast(void**)&archive_entry_set_symlink_utf8,"archive_entry_set_symlink_utf8");
		bindFunc(cast(void**)&archive_entry_copy_symlink,"archive_entry_copy_symlink");
		bindFunc(cast(void**)&archive_entry_copy_symlink_w,"archive_entry_copy_symlink_w");
		bindFunc(cast(void**)&archive_entry_update_symlink_utf8,"archive_entry_update_symlink_utf8");
		bindFunc(cast(void**)&archive_entry_set_uid,"archive_entry_set_uid");
		bindFunc(cast(void**)&archive_entry_set_uname,"archive_entry_set_uname");
		bindFunc(cast(void**)&archive_entry_set_uname_utf8,"archive_entry_set_uname_utf8");
		bindFunc(cast(void**)&archive_entry_copy_uname,"archive_entry_copy_uname");
		bindFunc(cast(void**)&archive_entry_copy_uname_w,"archive_entry_copy_uname_w");
		bindFunc(cast(void**)&archive_entry_update_uname_utf8,"archive_entry_update_uname_utf8");
		bindFunc(cast(void**)&archive_entry_set_is_data_encrypted,"archive_entry_set_is_data_encrypted");
		bindFunc(cast(void**)&archive_entry_set_is_metadata_encrypted,"archive_entry_set_is_metadata_encrypted");
		bindFunc(cast(void**)&archive_entry_stat,"archive_entry_stat");
		bindFunc(cast(void**)&archive_entry_copy_stat,"archive_entry_copy_stat");
		bindFunc(cast(void**)&archive_entry_mac_metadata,"archive_entry_mac_metadata");
		bindFunc(cast(void**)&archive_entry_copy_mac_metadata,"archive_entry_copy_mac_metadata");
		bindFunc(cast(void**)&archive_entry_acl_clear,"archive_entry_acl_clear");
		bindFunc(cast(void**)&archive_entry_acl_add_entry,"archive_entry_acl_add_entry");
		bindFunc(cast(void**)&archive_entry_acl_add_entry_w,"archive_entry_acl_add_entry_w");
		bindFunc(cast(void**)&archive_entry_acl_reset,"archive_entry_acl_reset");
		bindFunc(cast(void**)&archive_entry_acl_next,"archive_entry_acl_next");
		bindFunc(cast(void**)&archive_entry_acl_next_w,"archive_entry_acl_next_w");
		bindFunc(cast(void**)&archive_entry_acl_to_text_w,"archive_entry_acl_to_text_w");
		bindFunc(cast(void**)&archive_entry_acl_to_text,"archive_entry_acl_to_text");
		bindFunc(cast(void**)&archive_entry_acl_from_text_w,"archive_entry_acl_from_text_w");
		bindFunc(cast(void**)&archive_entry_acl_from_text,"archive_entry_acl_from_text");
		bindFunc(cast(void**)&archive_entry_acl_types,"archive_entry_acl_types");
		bindFunc(cast(void**)&archive_entry_acl_count,"archive_entry_acl_count");
		bindFunc(cast(void**)&archive_entry_acl,"archive_entry_acl");
		bindFunc(cast(void**)&archive_entry_xattr_clear,"archive_entry_xattr_clear");
		bindFunc(cast(void**)&archive_entry_xattr_add_entry,"archive_entry_xattr_add_entry");
		bindFunc(cast(void**)&archive_entry_xattr_count,"archive_entry_xattr_count");
		bindFunc(cast(void**)&archive_entry_xattr_reset,"archive_entry_xattr_reset");
		bindFunc(cast(void**)&archive_entry_xattr_next,"archive_entry_xattr_next");
		bindFunc(cast(void**)&archive_entry_sparse_clear,"archive_entry_sparse_clear");
		bindFunc(cast(void**)&archive_entry_sparse_add_entry,"archive_entry_sparse_add_entry");
		bindFunc(cast(void**)&archive_entry_sparse_count,"archive_entry_sparse_count");
		bindFunc(cast(void**)&archive_entry_sparse_reset,"archive_entry_sparse_reset");
		bindFunc(cast(void**)&archive_entry_sparse_next,"archive_entry_sparse_next");
		bindFunc(cast(void**)&archive_entry_linkresolver_new,"archive_entry_linkresolver_new");
		bindFunc(cast(void**)&archive_entry_linkresolver_set_strategy,"archive_entry_linkresolver_set_strategy");
		bindFunc(cast(void**)&archive_entry_linkresolver_free,"archive_entry_linkresolver_free");
		bindFunc(cast(void**)&archive_entry_linkify,"archive_entry_linkify");
		bindFunc(cast(void**)&archive_entry_partial_links,"archive_entry_partial_links");
	}
}

__gshared DerelictLibArchiveLoader DerelictLibArchive;

shared static this() {
	DerelictLibArchive = new DerelictLibArchiveLoader();
}

private static if(Derelict_OS_Windows) {
	enum libNames = "libarchive.dll";
} else static if(Derelict_OS_Mac) {
	enum libNames = "libarchive.dylib";
} else static if(Derelict_OS_Posix) {
	enum libNames = "libarchive.so,/usr/local/lib/libarchive.so";
} else {
	static assert(0,"Need to implement libarchive libNames for this operating system.");
}

module derelict.libarchive.type;

//import derelict.util.system : MakeEnum;

extern(C) nothrow:

// archive.h

alias time_t = ulong;

alias la_int64_t = long;
alias la_ssize_t = ptrdiff_t;

enum ARCHIVE_VERSION_NUMBER = 3003003;

enum ARCHIVE_VERSION_ONLY_STRING = "3.3.3dev";
enum ARCHIVE_VERSION_STRING = "libarchive " ~ ARCHIVE_VERSION_ONLY_STRING;

struct archive;
struct archive_entry;
struct stat;

enum ARCHIVE_EOF = 1;
enum ARCHIVE_OK = 0;
enum ARCHIVE_RETRY = (-10);
enum ARCHIVE_WARN = (-20);
enum ARCHIVE_FAILED = (-25);
enum ARCHIVE_FATAL = (-30);

alias archive_read_callback = la_ssize_t function(archive*,void*,const(void)**);
alias archive_skip_callback = la_int64_t function(archive*,void*,la_int64_t);
alias archive_write_callback = la_ssize_t function(archive*,void*,const(void)*,size_t);
alias archive_seek_callback = la_int64_t function(archive*,void*,la_int64_t,int);
alias archive_open_callback = int function(archive*,void*);
alias archive_close_callback = int function(archive*,void*);
alias archive_switch_callback = int function(archive*,void*,void*);
alias archive_passphrase_callback = const(char)* function(archive*,void*);

enum ARCHIVE_FILTER_NONE = 0;
enum ARCHIVE_FILTER_GZIP = 1;
enum ARCHIVE_FILTER_BZIP2 = 2;
enum ARCHIVE_FILTER_COMPRESS = 3;
enum ARCHIVE_FILTER_PROGRAM = 4;
enum ARCHIVE_FILTER_LZMA = 5;
enum ARCHIVE_FILTER_XZ = 6;
enum ARCHIVE_FILTER_UU = 7;
enum ARCHIVE_FILTER_RPM = 8;
enum ARCHIVE_FILTER_LZIP = 9;
enum ARCHIVE_FILTER_LRZIP = 10;
enum ARCHIVE_FILTER_LZOP = 11;
enum ARCHIVE_FILTER_GRZIP = 12;
enum ARCHIVE_FILTER_LZ4 = 13;

static if(ARCHIVE_VERSION_NUMBER < 4000000) {
	enum ARCHIVE_COMPRESSION_NONE = ARCHIVE_FILTER_NONE;
	enum ARCHIVE_COMPRESSION_GZIP = ARCHIVE_FILTER_GZIP;
	enum ARCHIVE_COMPRESSION_BZIP2 = ARCHIVE_FILTER_BZIP2;
	enum ARCHIVE_COMPRESSION_COMPRESS = ARCHIVE_FILTER_COMPRESS;
	enum ARCHIVE_COMPRESSION_PROGRAM = ARCHIVE_FILTER_PROGRAM;
	enum ARCHIVE_COMPRESSION_LZMA = ARCHIVE_FILTER_LZMA;
	enum ARCHIVE_COMPRESSION_XZ = ARCHIVE_FILTER_XZ;
	enum ARCHIVE_COMPRESSION_UU = ARCHIVE_FILTER_UU;
	enum ARCHIVE_COMPRESSION_RPM = ARCHIVE_FILTER_RPM;
	enum ARCHIVE_COMPRESSION_LZIP = ARCHIVE_FILTER_LZIP;
	enum ARCHIVE_COMPRESSION_LRZIP = ARCHIVE_FILTER_LRZIP;
}
;
enum ARCHIVE_FORMAT_BASE_MASK = 0xff0000;
enum ARCHIVE_FORMAT_CPIO = 0x10000;
enum ARCHIVE_FORMAT_CPIO_POSIX = (ARCHIVE_FORMAT_CPIO | 1);
enum ARCHIVE_FORMAT_CPIO_BIN_LE = (ARCHIVE_FORMAT_CPIO | 2);
enum ARCHIVE_FORMAT_CPIO_BIN_BE = (ARCHIVE_FORMAT_CPIO | 3);
enum ARCHIVE_FORMAT_CPIO_SVR4_NOCRC = (ARCHIVE_FORMAT_CPIO | 4);
enum ARCHIVE_FORMAT_CPIO_SVR4_CRC = (ARCHIVE_FORMAT_CPIO | 5);
enum ARCHIVE_FORMAT_CPIO_AFIO_LARGE = (ARCHIVE_FORMAT_CPIO | 6);
enum ARCHIVE_FORMAT_SHAR = 0x20000;
enum ARCHIVE_FORMAT_SHAR_BASE = (ARCHIVE_FORMAT_SHAR | 1);
enum ARCHIVE_FORMAT_SHAR_DUMP = (ARCHIVE_FORMAT_SHAR | 2);
enum ARCHIVE_FORMAT_TAR = 0x30000;
enum ARCHIVE_FORMAT_TAR_USTAR = (ARCHIVE_FORMAT_TAR | 1);
enum ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE = (ARCHIVE_FORMAT_TAR | 2);
enum ARCHIVE_FORMAT_TAR_PAX_RESTRICTED = (ARCHIVE_FORMAT_TAR | 3);
enum ARCHIVE_FORMAT_TAR_GNUTAR = (ARCHIVE_FORMAT_TAR | 4);
enum ARCHIVE_FORMAT_ISO9660 = 0x40000;
enum ARCHIVE_FORMAT_ISO9660_ROCKRIDGE = (ARCHIVE_FORMAT_ISO9660 | 1);
enum ARCHIVE_FORMAT_ZIP = 0x50000;
enum ARCHIVE_FORMAT_EMPTY = 0x60000;
enum ARCHIVE_FORMAT_AR = 0x70000;
enum ARCHIVE_FORMAT_AR_GNU = (ARCHIVE_FORMAT_AR | 1);
enum ARCHIVE_FORMAT_AR_BSD = (ARCHIVE_FORMAT_AR | 2);
enum ARCHIVE_FORMAT_MTREE = 0x80000;
enum ARCHIVE_FORMAT_RAW = 0x90000;
enum ARCHIVE_FORMAT_XAR = 0xA0000;
enum ARCHIVE_FORMAT_LHA = 0xB0000;
enum ARCHIVE_FORMAT_CAB = 0xC0000;
enum ARCHIVE_FORMAT_RAR = 0xD0000;
enum ARCHIVE_FORMAT_7ZIP = 0xE0000;
enum ARCHIVE_FORMAT_WARC = 0xF0000;

enum ARCHIVE_READ_FORMAT_CAPS_NONE = (0);
enum ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_DATA = (1<<0);
enum ARCHIVE_READ_FORMAT_CAPS_ENCRYPT_METADATA = (1<<1);

enum ARCHIVE_READ_FORMAT_ENCRYPTION_UNSUPPORTED = -2;
enum ARCHIVE_READ_FORMAT_ENCRYPTION_DONT_KNOW = -1;

enum ARCHIVE_EXTRACT_OWNER = (0x0001);
enum ARCHIVE_EXTRACT_PERM = (0x0002);
enum ARCHIVE_EXTRACT_TIME = (0x0004);
enum ARCHIVE_EXTRACT_NO_OVERWRITE  = (0x0008);
enum ARCHIVE_EXTRACT_UNLINK = (0x0010);
enum ARCHIVE_EXTRACT_ACL = (0x0020);
enum ARCHIVE_EXTRACT_FFLAGS = (0x0040);
enum ARCHIVE_EXTRACT_XATTR  = (0x0080);
enum ARCHIVE_EXTRACT_SECURE_SYMLINKS = (0x0100);
enum ARCHIVE_EXTRACT_SECURE_NODOTDOT = (0x0200);
enum ARCHIVE_EXTRACT_NO_AUTODIR = (0x0400);
enum ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER = (0x0800);
enum ARCHIVE_EXTRACT_SPARSE = (0x1000);
enum ARCHIVE_EXTRACT_MAC_METADATA = (0x2000);
enum ARCHIVE_EXTRACT_NO_HFS_COMPRESSION = (0x4000);
enum ARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED = (0x8000);
enum ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS = (0x10000);
enum ARCHIVE_EXTRACT_CLEAR_NOCHANGE_FFLAGS = (0x20000);

enum ARCHIVE_READDISK_RESTORE_ATIME = (0x0001);
enum ARCHIVE_READDISK_HONOR_NODUMP = (0x0002);
enum ARCHIVE_READDISK_MAC_COPYFILE = (0x0004);
enum ARCHIVE_READDISK_NO_TRAVERSE_MOUNTS = (0x0008);
enum ARCHIVE_READDISK_NO_XATTR = (0x0010);
enum ARCHIVE_READDISK_NO_ACL = (0x0020);
enum ARCHIVE_READDISK_NO_FFLAGS = (0x0040);

enum ARCHIVE_MATCH_MTIME = (0x0100);
enum ARCHIVE_MATCH_CTIME = (0x0200);
enum ARCHIVE_MATCH_NEWER = (0x0001);
enum ARCHIVE_MATCH_OLDER = (0x0002);
enum ARCHIVE_MATCH_EQUAL = (0x0010);
